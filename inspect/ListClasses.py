"""
NOTE: (obsolete)
 obj.__methods__ return the object methods
 dir(obj) retruns everything, even properties in the form ___????___

 class.__methods__ doesnt return inherited methods
 dir(class) same
"""

from vtk import *



#---------------------------------------------------------

# ['vtkGetDataRoot', 'vtkIndent', 'vtkTimeStamp']
# don't have the __class__ attribute.
# asking for __class__ generate an AttributeError:

# ['vtk','vtk3DWidget', 'vtkAbstractClasses', 'vtkAbstractMapper' ....]
# are abstract classes
# instancing them gives a TypeError:

kwClasses = []
kwAbstractClasses = []
kwNonClasses = []

# everything that begins with vtk
kwNames = [ i for i in dir() if i[:3] == 'vtk']     

# remove deprecated classes
kwDeprecated = [
 'vtkInteractorStyleTrackball',
 'vtkStructuredPointsGeometryFilter',
 'vtkTreeComposite',
 'vtkVolumeRayCastMapper', 
 'vtkVolumeRayCastIsosurfaceFunction',
 'vtkVolumeRayCastMapper',
 'vtkVolumeRayCastMIPFunction',
 'vtkVolumeRayCastCompositeFunction',
 'vtkVolumeRayCastIsosurfaceFunction',
 'vtkWin32TextMapper'
]
try:
    for i in kwDeprecated:
        kwNames.delete(i)
except:
    pass
    
# determine vtk classes
# by tring names instantiation

for i in kwNames:
    try:
        obj = eval(i+'()')
        n = obj.__class__.__name__
        kwClasses.append(i)
    except TypeError:
        # by instancing an abstract class we fall here
        kwAbstractClasses.append(i)
    except AttributeError:
        # by trying to instance things without the __class__ attribute we fall here
        kwNonClasses.append(i)
    except:
        # deprecated classes rises even a different error
        pass 

# vtk class classification

kwReader            = [] 
kwWriter            = []
kwSource            = []
kwImporter          = []
kwExporter          = []
kwMapper            = []
kwActor             = []
kwFilter            = []
kwImageFilter       = []
kwWidget            = []
kwInteractorStyle   = []
kwUnclassified      = []

for i in kwClasses:

    if i[:9] == "vtkOpenGL" :  
        pass
    elif i[:8] == "vtkWin32" :
        pass
    elif i[:18] == "vtkInteractorStyle" :
        kwInteractorStyle.append(i)
    elif i[-6:] == "Reader" :
        kwReader.append(i)
    elif i[-6:] == "Writer" :
        kwWriter.append(i)
    elif i[-6:] == "Source" :
        kwSource.append(i)
    elif i[-8:] == "Importer" :
        kwImporter.append(i)
    elif i[-8:] == "Exporter" :
        kwExporter.append(i)
    elif i[-6:] == "Mapper" or i[-9:] == "Mapper2D":
        kwMapper.append(i)
    elif i[-5:] == "Actor" or i[-7:] == "Actor2D":
        kwActor.append(i)
    elif i[-6:] == "Widget" :
        kwWidget.append(i)
    else :
        obj = eval(i+'()')
        m1 = getattr(obj,'SetInputConnection','no')
        m2 = getattr(obj,'GetOutputPort','no')
        if m1 != 'no' and m2 != 'no' :
            if i[:8] == 'vtkImage' :
                kwImageFilter.append(i)
            else:
                kwFilter.append(i)
        else:
            kwUnclassified.append(i)


def MyRepr( lst ):
    lst.sort()
    s = repr(lst).replace(',',',\n').replace('[','[\n ').replace(']','\n]\n\n')
    return s

def MyRepr2( lst ):
    s = repr(lst).replace(',',',\n').replace('{','{\n ').replace('}','\n}\n\n')
    return s

s = "ConcreteClasses =" + MyRepr(kwClasses) +\
    "AbstractClasses =" + MyRepr(kwAbstractClasses) +\
    "NonClasses ="      + MyRepr(kwNonClasses) +\
    "Readers ="         + MyRepr(kwReader) +\
    "Writers ="         + MyRepr(kwWriter) +\
    "Sources ="         + MyRepr(kwSource) +\
    "Importers ="       + MyRepr(kwImporter) +\
    "Exporters ="       + MyRepr(kwExporter) +\
    "Mappers ="         + MyRepr(kwMapper) +\
    "Actors ="          + MyRepr(kwActor) +\
    "Filters ="         + MyRepr(kwFilter) +\
    "ImageFilters ="    + MyRepr(kwImageFilter) +\
    "Widgets ="         + MyRepr(kwWidget) +\
    "InteractorStyles=" + MyRepr(kwInteractorStyle) +\
    "Unclassified ="    + MyRepr(kwUnclassified) 

fout = open('vtkClasses.py','w')
fout.write('"generated by ListClasses.py"\n\n')
fout.write(s)

'''
for i in kwTypeNames:
    lst = eval('kw' + i)
    s = i + " = " + MyRepr(lst)
    fout.write(s)

s = "Types = " + MyRepr2(kwTypes)
fout.write(s)
'''

fout.close()







